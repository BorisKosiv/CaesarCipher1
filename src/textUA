1.	Кінцева програма повинна бути зібрана у форматі jar. (Збірку поки ігноруйте, на лекції потім покажемо як)
2.	Програму можна запустити із консолі передавши аргументи.
o	Можете вносити аргументи в Run configuration > program arguments
o	Запуск програми відбувається з такими аргументами:
o	command filePath key - саме в такому порядку.
	Тобто запуск самої з консолі програми буде виглядати як java -jar myApp.jar command filePath key
	command - три доступні варіанти: [ENCRYPT, DECRYPT, BRUTE_FORCE]
	filepath - абсолютний(повний) шлях до файлу, який кодується.
	key - ціле число, ключ для зсуву по алфавіту.
o	У разі передачі ENCRYPT/DECRYPT key обов'язковий.
3.	Результатом роботи програми в папці з початковим файлом повинен з'явитися файл з тим самим ім'ям, що і вхідний файл, але з поміткою [ENCRYPTED] / [DECRYPTED] в залежності від виконаної операції.
4.	Зміст файлу повинен бути закодований/декодований використовуючи шифр Цезаря.
o	Зсув по алфавіту має бути циклічним.
o	(Якщо ключ більше ніж кількість літер в алфавіті, то дойти до кінця алфавіту і почати спочатку)
5.	Кодуються лише літери англійського алфавіту (великі та малі).
o	Можна також кодувати '.', ',', '«', '»', '"', '\'', ':', '!', '?', ' '. Інші символи залишаються незмінними.
o	Майте на увазі, що при кодуванні символів шифр стає "надійнішим", але це вже буде модифікований шифр Цезаря.
6.	Після розшифрування текст має максимально зберегти оригінальне форматування (В ідеалі текст не має взагалі відрізнятись)
o	(пробіли, відступи, перенесення на наступний рядок, знаки, великі та малі літери.)
o	Див. рекомендації [10]
7.	Програма повинна використовувати один і той же ключ для коректного кодування та декодування файлу.
8.	Програма має мати режим brute-force для автоматичного підпору ключа під зашифрований текст та його розшифрування.
9.	Код програми та готовий зібраний файл jar розмістити на GitHub.
10.	Написати про проект коротко в readme. Наприклад:
o	Що вийшло зробити.
o	Що НЕ вийшло зробити з основних вимог.
o	Особливості проекту.
o	Які цікаві рішення реалізовані.
o	На що варто звернути увагу ментором при перевірці.
Приклади використання:
•	java -jar c:/MyProject/target/myApp.jar ENCRYPT folder/textFile1.txt 20 // Файл з результатом folder/textFile1 [ENCRYPTED].txt
•	java -jar c:/MyProject/target/myApp.jar DECRYPT folder/textFile1[ENCRYPTED].txt 20 // Файл з результатом folder/textFile1 [DECRYPTED].txt
Рекомендації:
1.	Починайте з основних вимог. Шифрування/дешифрування, читання/запис файлів.
2.	Створюйте окремі класи для різного функціоналу. Наприклад:
o	FileService - для читання/записування файлів.
o	CaesarCipher - для шифрування/розшифрування тексту.
o	CLI - для взаємодії з користувачем.
o	Runner - для вирішення в якому режимі запускати програму (CLI чи працювати вже з отриманими аргументами)
o	...
3.	Пишіть зрозумілі назви методів та змінних.
4.	Старайтесь писати зрозумілий для читання код.
5.	Пишіть маленькі методи (до 20 лінійок вважаться хорошим тоном)
6.	Краще не використовувати статичні методи та змінні повсюди. Використовуйте обʼєкти.
7.	Не забувайте про модифікатори доступу.
8.	Використовуйте пакети.


